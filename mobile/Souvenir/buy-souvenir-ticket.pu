@startuml Membeli Tiket Suvenir
mainframe **sd** Membeli Tiket Suvenir
actor "User" as User
boundary "Home View" as HomeView
control SourvenirController 
entity Sourvenir as SourvenirModel
boundary "Sourvenir View " as SourvenirView
entity Ticket as TicketModel
boundary "Sourvenir Detail View" as  SourvenirDetailView
control OrderController
entity Ticket as TicketModel
boundary "Order View " as OrderView
boundary "Payment View" as PaymentView
control PaymentController
entity Payment as PaymentModel

autonumber
' autoactivate on
skinparam SequenceMessageAlignment center

activate User
activate HomeView
User->HomeView: sourvenir()
activate SourvenirController
HomeView->SourvenirController: view(sourvenir)
SourvenirController->SourvenirModel: getAllSourvenir()
activate SourvenirModel
deactivate HomeView
SourvenirModel-->SourvenirController: return(sourvenir)
deactivate SourvenirModel
activate SourvenirView
SourvenirController->SourvenirView: build(sourvenirs)
deactivate SourvenirController
User->SourvenirView: detail(sourvenir)
activate SourvenirController
SourvenirView->SourvenirController: detail(sourvenir)
deactivate SourvenirView
activate SourvenirDetailView
SourvenirController->SourvenirDetailView: sourvenirDetail(sourvenir)
deactivate SourvenirController
User->SourvenirDetailView: order(sourvenir)
activate SourvenirController
SourvenirDetailView->SourvenirController: order(sourvenir)
deactivate SourvenirDetailView
activate OrderController
SourvenirController-> OrderController: getTickets(sourvenir)
deactivate SourvenirController
activate TicketModel
OrderController-> TicketModel: getTickets(sourvenir)
TicketModel-->OrderController: return(tickets)
deactivate TicketModel
activate OrderView
OrderController->OrderView: view(sourvenir,tickets)
deactivate OrderController
User->OrderView: placeOrder(order)
activate OrderController
OrderView->OrderController: save(order)
activate PaymentController
deactivate OrderController
OrderView->PaymentController: create(order)
deactivate OrderView
activate PaymentModel
PaymentController->PaymentModel: createPayment(order)
PaymentModel--> PaymentController: return(payment)
activate PaymentView
deactivate PaymentModel

PaymentController->PaymentView: build(payment)
User->PaymentView: paid(payment)
PaymentView->PaymentController: paymentPaid(payment)
activate PaymentModel
PaymentController->PaymentModel: update(payment)
PaymentModel-> PaymentController: return(payment)
deactivate PaymentView
activate OrderController
PaymentController-->OrderController: update(order)
deactivate OrderController
PaymentController-->User: notifyPaymentSuccess()


@enduml